#include <stdio.h>
#include <stdlib.h>

typedef int E;

struct Stack{
      E * array;
      int capacity;
      int top;
};

typedef struct Stack * ArrayStack;

_Bool initStack(ArrayStack stack){
    if(stack==NULL) {
        printf("input a blankPoint");
        return 0;
    }
    stack->array = malloc(sizeof(E)*10);
    if(stack->array==NULL){
        printf("init fails\n");
        return 0;
    }
    stack->capacity=10;
    stack->top=-1;
    printf("init successfully:\n");
    return 1;

}
_Bool pushStack(ArrayStack stack,E element){
    if(stack==NULL) return 0;
    if(stack->top+1==stack->capacity){
        int newCapacity = stack->capacity+(stack->capacity >> 1);
        E * newArray = realloc(stack->array,newCapacity* sizeof(E));
        if(newArray == NULL) return 0;
        stack->array = newArray;
        stack->capacity = newCapacity;
    }
    stack->top++;
    stack->array[stack->top] = element;
    return 1;
};
_Bool pop(ArrayStack stack){
    int popElement = stack->array[stack->top];
    stack->array[stack->top]=NULL;
    stack->top--;
    return popElement;
}
void printStack(ArrayStack stack){
    if(stack==NULL) return;
    printf("------------------\n");
    printf("| ");
    for (int i = 0; i < stack->top + 1; ++i){
        printf("%d ",stack->array[i]);
    }
    printf("\n------------------\n");
    printf("top=%d\n",stack->top);
    printf("capacity=%d\n",stack->capacity);
}
int main(){
    struct Stack stack;
    initStack(&stack);
    for (int i = 1; i <= 11; ++i){
        pushStack(&stack,i*100);
        printStack(&stack);
    }
    pop(&stack);
    printStack(&stack);
    return 0;
}
